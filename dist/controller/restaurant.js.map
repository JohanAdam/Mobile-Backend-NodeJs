{"version":3,"sources":["../../src/controller/restaurant.js"],"names":["config","db","api","post","req","res","newRest","name","body","save","err","send","json","message","get","find","restaurants","findById","params","id","restaurant","put","delete","remove","_id"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA;;kBAEc,gBAAoB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AAChC,MAAIC,MAAM,sBAAV;;AAEA;;AAEA;AACAA,MAAIC,IAAJ,CAAS,MAAT,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B;AACA,QAAIC,UAAU,0BAAd;AACA;AACAA,YAAQC,IAAR,GAAeH,IAAII,IAAJ,CAASD,IAAxB;;AAEA;AACAD,YAAQG,IAAR,CAAa,eAAO;AAClB,UAAIC,GAAJ,EAAS;AACP;AACAL,YAAIM,IAAJ,CAASD,GAAT;AACD;AACD;AACAL,UAAIO,IAAJ,CAAS,EAAEC,SAAS,gCAAX,EAAT;AACD,KAPD;AAQD,GAfD;;AAiBA;AACAX,MAAIY,GAAJ,CAAQ,GAAR,EAAa,UAACV,GAAD,EAAMC,GAAN,EAAc;AACzB;AACA,yBAAWU,IAAX,CAAgB,EAAhB,EAAoB,UAACL,GAAD,EAAMM,WAAN,EAAsB;AACxC,UAAIN,GAAJ,EAAS;AACP;AACAL,YAAIM,IAAJ,CAASD,GAAT;AACD;AACD;AACAL,UAAIO,IAAJ,CAASI,WAAT;AACD,KAPD;AAQD,GAVD;;AAYA;AACAd,MAAIY,GAAJ,CAAQ,MAAR,EAAgB,UAACV,GAAD,EAAMC,GAAN,EAAc;AAC5B;AACA,yBAAWY,QAAX,CAAoBb,IAAIc,MAAJ,CAAWC,EAA/B,EAAmC,UAACT,GAAD,EAAMU,UAAN,EAAqB;AACtD,UAAIV,GAAJ,EAAS;AACP;AACAL,YAAIM,IAAJ,CAASD,GAAT;AACD;AACD;AACAL,UAAIO,IAAJ,CAASQ,UAAT;AACD,KAPD;AAQD,GAVD;;AAYA;AACAlB,MAAImB,GAAJ,CAAQ,MAAR,EAAgB,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAC5B;AACA,yBAAWY,QAAX,CAAoBb,IAAIc,MAAJ,CAAWC,EAA/B,EAAmC,UAACT,GAAD,EAAKU,UAAL,EAAoB;AACrD,UAAIV,GAAJ,EAAS;AACP;AACAL,YAAIM,IAAJ,CAASD,GAAT;AACD;AACD;AACAU,iBAAWb,IAAX,GAAkBH,IAAII,IAAJ,CAASD,IAA3B;AACAa,iBAAWX,IAAX,CAAgB,eAAO;AACrB,YAAIC,GAAJ,EAAS;AACP;AACAL,cAAIM,IAAJ,CAASD,GAAT;AACD;AACDL,YAAIO,IAAJ,CAAS,EAAEC,SAAS,uCAAX,EAAT;AACD,OAND;AAOD,KAdD;AAeD,GAjBD;;AAmBA;AACAX,MAAIoB,MAAJ,CAAW,MAAX,EAAmB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC/B;AACA,yBAAWkB,MAAX,CAAkB;AAChBC,WAAKpB,IAAIc,MAAJ,CAAWC;AADA,KAAlB,EAEG,UAACT,GAAD,EAAMU,UAAN,EAAqB;AACtB;AACA,UAAIV,GAAJ,EAAS;AACP;AACAL,YAAIM,IAAJ,CAASD,GAAT;AACD;AACD;AACAL,UAAIO,IAAJ,CAAS,EAAEC,SAAQ,kCAAV,EAAT;AACD,KAVD;AAWD,GAbD;;AAeA;AACA,SAAOX,GAAP;AACD,C","file":"restaurant.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport Restaurant from '../model/restaurant';\r\n\r\n//RESTAURANT controller\r\n\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n\r\n  //CRUD - Create Read Update Delete\r\n\r\n  //POST Request 'Domain/v1/restaurant/add' - Create\r\n  api.post('/add', (req, res) => {\r\n    //create new Restaurant\r\n    let newRest = new Restaurant();\r\n    //get the name in the request and set to the Model.name\r\n    newRest.name = req.body.name;\r\n\r\n    //Save the data ; mongoose make simple to save data to mongoDb\r\n    newRest.save(err => {\r\n      if (err) {\r\n        //if there is an error while save, send err to the response\r\n        res.send(err);\r\n      }\r\n      //If there is no error while save, send message that data has been save without problem.\r\n      res.json({ message: 'Restaurant saved successfully!' });\r\n    });\r\n  });\r\n\r\n  //GET Request 'Domain/v1/restaurant' - Read\r\n  api.get('/', (req, res) => {\r\n    //Go to Restaurant db and find all\r\n    Restaurant.find({}, (err, restaurants) => {\r\n      if (err) {\r\n        //If error exist while get all Restaurant\r\n        res.send(err);\r\n      }\r\n      //If the no error ; success\r\n      res.json(restaurants);\r\n    });\r\n  });\r\n\r\n  //GET Request 'Domain/v1/restaurant/:id' - Read 1\r\n  api.get('/:id', (req, res) => {\r\n    //Go to Restaurant db and find by id\r\n    Restaurant.findById(req.params.id, (err, restaurant) => {\r\n      if (err) {\r\n        //If error exist while get item in db\r\n        res.send(err);\r\n      }\r\n      //If no error while get item in db\r\n      res.json(restaurant);\r\n    });\r\n  });\r\n\r\n  //PUT Request 'Domain/v1/restaurant/:id' - Update\r\n  api.put('/:id', (req, res) => {\r\n    //Go to restaurant and find by id\r\n    Restaurant.findById(req.params.id, (err,restaurant) => {\r\n      if (err) {\r\n        //send back error if persist\r\n        res.send(err);\r\n      }\r\n      //the name in the request assigned to the exist name\r\n      restaurant.name = req.body.name;\r\n      restaurant.save(err => {\r\n        if (err) {\r\n          //If error while save the data\r\n          res.send(err);\r\n        }\r\n        res.json({ message: \"Restaurant info updated successfully!\" })\r\n      });\r\n    });\r\n  });\r\n\r\n  //DELETE Request 'Domain/v1/restaurant/:id' - Delete\r\n  api.delete('/:id', (req, res) => {\r\n    //Get Restaurant model and remove by id from the request\r\n    Restaurant.remove({\r\n      _id: req.params.id\r\n    }, (err, restaurant) => {\r\n      //If error while delete\r\n      if (err) {\r\n        //Send the error\r\n        res.send(err);\r\n      }\r\n      //If there is no error while delete, Send message\r\n      res.json({ message:\"Restaurant successfully removed!\" });\r\n    });\r\n  });\r\n\r\n  //return the api back after finish\r\n  return api;\r\n}\r\n"]}